{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","newtext","split","join","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.11abcfbb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a  className=\"nav-link\" href=\"/about\">\r\n                {props.aboutText}\r\n              </a>\r\n              </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n        <div className={`form-check form-switch text-${props.mode === 'light'?'grey':'white'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor =\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = { title: PropTypes.string.isRequired, aboutText: PropTypes.string };\r\n\r\nNavbar.defaultProps = {title: 'set Title here', aboutText: 'About'};","import React, { useState } from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log('Uppercase was clicked' + text);\r\n        // setText(\"You have clicked on handleUpClick\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase!\",\"success\");\r\n    }\r\n    const handleLoClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase!\",\"success\");\r\n    }\r\n    const handleClearClick = ()=>{\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\",\"success\");\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"On change\");\r\n        setText(event.target.value);\r\n    }\r\n    const handleCopy = () => {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to clipboard!\",\"success\");\r\n    }\r\n    const handleExtraSpaces = () => {\r\n        let newtext = text.split(/[ ]+/);\r\n        setText (newtext.join(\" \"))\r\n        props.showAlert(\"Extra spaces removed!\",\"success\");\r\n    }\r\n\r\n    const [text, setText] = useState('Enter text here'); \r\n    // text = \"new text\"; // Wrong way to change the state\r\n    // setText(\"new text\"); // Correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\"> \r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 *  text.split(\" \").length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length > 0 ? text : \"Enter something in the textbox above to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\nimport React, { useState } from 'react';\r\nimport Alert from './components/Alert';\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState('light');\r\n  const [alert, setAlert] = useState(null)\r\n\r\n  const showAlert = (message, type)=>{\r\n    setAlert({\r\n      msg: message,\r\n      type: type\r\n    })\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1500);\r\n  }\r\n  const toggleMode = ()=>{\r\n    if (mode === 'light'){\r\n      setMode('dark');\r\n      document.body.style.backgroundColor='grey';\r\n      showAlert(\"Dark mode has been enabled\",\"success\");\r\n      document.title = 'TextUtils - Dark Mode';\r\n      // setInterval(() => {\r\n      //   document.title = 'TextUtils - Amazing';\r\n      // }, 2000);\r\n      // setInterval(() => {\r\n      //   document.title = 'Install TextUtils Now!';\r\n      // }, 1500);\r\n    }\r\n    else{\r\n      setMode('light');\r\n      document.body.style.backgroundColor='white';\r\n      showAlert(\"Light mode has been enabled\",\"success\");\r\n      document.title = 'TextUtils - Light Mode';\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n    <Navbar title = \"TextUtils2\" aboutText = \"About\" mode={mode} toggleMode={toggleMode}/>\r\n    {/* <Navbar/> */}\r\n    <Alert alert={alert}/>\r\n    <div className=\"container my-3\">\r\n    {/* Remember you must use an ‘exact’ parameter with the Route component as it disables the partial matching of the route and makes sure that it only returns the route if the path is exact. \r\n    /users ---> component 1\r\n    /users/home/ --- component 2 */}\r\n    <TextForm showAlert = {showAlert} heading=\"Enter the text to analyze\" mode={mode}/>\r\n     </div>\r\n    </> \r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}